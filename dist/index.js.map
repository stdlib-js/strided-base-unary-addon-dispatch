{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/ndarray.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar resolve = require( '@stdlib/strided-base-dtype-resolve-enum' );\nvar reinterpretComplex64 = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar reinterpretComplex128 = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar COMPLEX64 = resolve( 'complex64' );\nvar COMPLEX128 = resolve( 'complex128' );\n\n\n// MAIN //\n\n/**\n* Returns a function which dispatches to a native add-on applying a unary function to an input strided array.\n*\n* ## Notes\n*\n* -   The returned function has the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: output array.\n*     -   **strideY**: `y` stride length.\n*\n* -   The add-on function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type (enumeration constant).\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type (enumeration constant).\n*     -   **y**: output array.\n*     -   **strideY**: `y` stride length.\n*\n* -   The fallback function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: output array.\n*     -   **strideY**: `y` stride length.\n*\n* @param {Function} addon - add-on interface\n* @param {Function} fallback - fallback function\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a function\n* @returns {Function} dispatch function\n*\n* @example\n* function addon( N, dtypeX, x, strideX, dtypeY, y, strideY ) {\n*     // Call into native add-on...\n* }\n*\n* function fallback( N, dtypeX, x, strideX, dtypeY, y, strideY ) {\n*     // Fallback JavaScript implementation...\n* }\n*\n* // Create a dispatch function:\n* var f = dispatch( addon, fallback );\n*\n* // ...\n*\n* // Invoke the dispatch function with strided array arguments:\n* f( 2, 'generic', [ 1, 2 ], 1, 'generic', [ 0, 0 ], 1 );\n*/\nfunction dispatch( addon, fallback ) {\n\tif ( !isFunction( addon ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', addon ) );\n\t}\n\tif ( !isFunction( fallback ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', fallback ) );\n\t}\n\treturn dispatcher;\n\n\t/**\n\t* Dispatches to a native add-on.\n\t*\n\t* @private\n\t* @param {integer} N - number of indexed elements\n\t* @param {*} dtypeX - `x` data type\n\t* @param {Collection} x - input array\n\t* @param {integer} strideX - `x` stride length\n\t* @param {*} dtypeY - `y` data type\n\t* @param {Collection} y - destination array\n\t* @param {integer} strideY - `y` stride length\n\t* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n\t* @returns {Collection} `y`\n\t*/\n\tfunction dispatcher( N, dtypeX, x, strideX, dtypeY, y, strideY ) {\n\t\tvar viewX;\n\t\tvar viewY;\n\n\t\t// WARNING: we assume that, if we're provided something resembling a typed array, we're provided a typed array; however, this can lead to potential unintended errors as the native add-on may not work with non-typed array objects (e.g., generic arrays)...\n\t\tif ( !isTypedArrayLike( x ) || !isTypedArrayLike( y ) ) {\n\t\t\tfallback( N, dtypeX, x, strideX, dtypeY, y, strideY );\n\t\t\treturn y;\n\t\t}\n\t\tdtypeX = resolve( dtypeX );\n\t\tdtypeY = resolve( dtypeY );\n\t\tif ( dtypeX === null || dtypeY === null ) {\n\t\t\tthrow new TypeError( 'invalid arguments. Unable to resolve a strided array function supporting the provided array argument data types.' );\n\t\t}\n\t\tif ( dtypeX === COMPLEX64 ) {\n\t\t\tviewX = reinterpretComplex64( x, 0 );\n\t\t} else if ( dtypeX === COMPLEX128 ) {\n\t\t\tviewX = reinterpretComplex128( x, 0 );\n\t\t} else {\n\t\t\tviewX = x;\n\t\t}\n\t\tif ( dtypeY === COMPLEX64 ) {\n\t\t\tviewY = reinterpretComplex64( y, 0 );\n\t\t} else if ( dtypeY === COMPLEX128 ) {\n\t\t\tviewY = reinterpretComplex128( y, 0 );\n\t\t} else {\n\t\t\tviewY = y;\n\t\t}\n\t\taddon( N, dtypeX, viewX, strideX, dtypeY, viewY, strideY );\n\t\treturn y;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = dispatch;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar resolve = require( '@stdlib/strided-base-dtype-resolve-enum' );\nvar reinterpretComplex64 = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar reinterpretComplex128 = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar offsetView = require( '@stdlib/strided-base-offset-view' );\nvar minViewBufferIndex = require( '@stdlib/strided-base-min-view-buffer-index' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar COMPLEX64 = resolve( 'complex64' );\nvar COMPLEX128 = resolve( 'complex128' );\n\n\n// MAIN //\n\n/**\n* Returns a function which dispatches to a native add-on applying a unary function to an input strided array using alternative indexing semantics.\n*\n* ## Notes\n*\n* -   The returned function has the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **offsetX**: starting `x` index.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: output array.\n*     -   **strideY**: `y` stride length.\n*     -   **offsetY**: starting `y` index.\n*\n* -   The add-on function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type (enumeration constant).\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type (enumeration constant).\n*     -   **y**: output array.\n*     -   **strideY**: `y` stride length.\n*\n* -   The fallback function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **offsetX**: starting `x` index.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: output array.\n*     -   **strideY**: `y` stride length.\n*     -   **offsetY**: starting `y` index.\n*\n* @param {Function} addon - add-on interface\n* @param {Function} fallback - fallback function\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a function\n* @returns {Function} dispatch function\n*\n* @example\n* function addon( N, dtypeX, x, strideX, dtypeY, y, strideY ) {\n*     // Call into native add-on...\n* }\n*\n* function fallback( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY ) {\n*     // Fallback JavaScript implementation...\n* }\n*\n* // Create a dispatch function:\n* var f = dispatch( addon, fallback );\n*\n* // ...\n*\n* // Invoke the dispatch function with strided array arguments:\n* f( 2, 'generic', [ 1, 2 ], 1, 0, 'generic', [ 0, 0 ], 1, 0 );\n*/\nfunction dispatch( addon, fallback ) {\n\tif ( !isFunction( addon ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', addon ) );\n\t}\n\tif ( !isFunction( fallback ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', fallback ) );\n\t}\n\treturn dispatcher;\n\n\t/**\n\t* Dispatches to a native add-on.\n\t*\n\t* @private\n\t* @param {integer} N - number of indexed elements\n\t* @param {*} dtypeX - `x` data type\n\t* @param {Collection} x - input array\n\t* @param {integer} strideX - `x` stride length\n\t* @param {NonNegativeInteger} offsetX - starting `x` index\n\t* @param {*} dtypeY - `y` data type\n\t* @param {Collection} y - destination array\n\t* @param {integer} strideY - `y` stride length\n\t* @param {NonNegativeInteger} offsetY - starting `y` index\n\t* @throws {TypeError} fifth argument must be a nonnegative integer\n\t* @throws {TypeError} ninth argument must be a nonnegative integer\n\t* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n\t* @returns {Collection} `y`\n\t*/\n\tfunction dispatcher( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY ) { // eslint-disable-line max-len\n\t\tvar viewX;\n\t\tvar viewY;\n\n\t\t// WARNING: we assume that, if we're provided something resembling a typed array, we're provided a typed array; however, this can lead to potential unintended errors as the native add-on may not work with non-typed array objects (e.g., generic arrays)...\n\t\tif ( !isTypedArrayLike( x ) || !isTypedArrayLike( y ) ) {\n\t\t\tfallback( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\tdtypeX = resolve( dtypeX );\n\t\tdtypeY = resolve( dtypeY );\n\t\tif ( dtypeX === null || dtypeY === null ) {\n\t\t\tthrow new TypeError( 'invalid arguments. Unable to resolve a strided array function supporting the provided array argument data types.' );\n\t\t}\n\t\tif ( !isNonNegativeInteger( offsetX ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Input array offset must be a nonnegative integer. Value: `%s`.', offsetX ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( offsetY ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output array offset must be a nonnegative integer. Value: `%s`.', offsetY ) );\n\t\t}\n\t\toffsetX = minViewBufferIndex( N, strideX, offsetX );\n\t\toffsetY = minViewBufferIndex( N, strideY, offsetY );\n\t\tif ( dtypeX === COMPLEX64 ) {\n\t\t\tviewX = reinterpretComplex64( x, offsetX );\n\t\t} else if ( dtypeX === COMPLEX128 ) {\n\t\t\tviewX = reinterpretComplex128( x, offsetX );\n\t\t} else {\n\t\t\tviewX = offsetView( x, offsetX );\n\t\t}\n\t\tif ( dtypeY === COMPLEX64 ) {\n\t\t\tviewY = reinterpretComplex64( y, offsetY );\n\t\t} else if ( dtypeY === COMPLEX128 ) {\n\t\t\tviewY = reinterpretComplex128( y, offsetY );\n\t\t} else {\n\t\t\tviewY = offsetView( y, offsetY );\n\t\t}\n\t\taddon( N, dtypeX, viewX, strideX, dtypeY, viewY, strideY );\n\t\treturn y;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = dispatch;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Dispatch to a native add-on applying a unary function to an input strided array.\n*\n* @module @stdlib/strided-base-unary-addon-dispatch\n*\n* @example\n* var dispatch = require( '@stdlib/strided-base-unary-addon-dispatch' );\n*\n* function addon( N, dtypeX, x, strideX, dtypeY, y, strideY ) {\n*     // Call into native add-on...\n* }\n*\n* function fallback( N, dtypeX, x, strideX, dtypeY, y, strideY ) {\n*     // Fallback JavaScript implementation...\n* }\n*\n* // Create a dispatch function:\n* var f = dispatch( addon, fallback );\n*\n* // ...\n*\n* // Invoke the dispatch function with strided array arguments:\n* f( 2, 'generic', [ 1, 2 ], 1, 'generic', [ 0, 0 ], 1 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isFunction", "isTypedArrayLike", "resolve", "reinterpretComplex64", "reinterpretComplex128", "format", "COMPLEX64", "COMPLEX128", "dispatch", "addon", "fallback", "dispatcher", "N", "dtypeX", "x", "strideX", "dtypeY", "y", "strideY", "viewX", "viewY", "require_ndarray", "__commonJSMin", "exports", "module", "isFunction", "isTypedArrayLike", "isNonNegativeInteger", "resolve", "reinterpretComplex64", "reinterpretComplex128", "offsetView", "minViewBufferIndex", "format", "COMPLEX64", "COMPLEX128", "dispatch", "addon", "fallback", "dispatcher", "N", "dtypeX", "x", "strideX", "offsetX", "dtypeY", "y", "strideY", "offsetY", "viewX", "viewY", "setReadOnly", "main", "ndarray"]
}
